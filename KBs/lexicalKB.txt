;;;;;;;;;
;OBJECTS;
;;;;;;;;;

; subsets

(B (name 3els)(=> (o#list l0 el1 el2 el3 :0.2)(^(subset_of e1 el1 l0)(subset_of e2 l1 l0)(subset_of e3 el2 l1)(subset_of e4 el3 l1))))

(B (name 2els)(=> (o#list l0 el1 el2 :0.45)(^(subset_of e1 el1 l0)(subset_of e2 el2 l0))))

; people

(B (name people-n)(=>(o#person x u :0.9)(people-n e x)))
(B (name person-n)(=>(o#person x  u :0.9)(person-n e x)))
(B (name individual-n)(=>(o#person x u :0.9)(individual-n e x)))
(B (name human-n)(=>(o#person x u :0.9)(human-n e x)))

; objects

;(B (name bottle-n)(=>(o#obj_bottle x u :0.9)(bottle-n e x)))
;(B (name chair-n)(=>(o#obj_chair x u :0.9)(chair-n e x)))
;(B (name container-n)(=>(o#obj_container x u :0.9)(container-n e x)))
;(B (name cup-n)(=>(o#obj_cup x u :0.9)(cup-n e x)))
;(B (name dishwasher-n)(=>(o#obj_dishwasher x u :0.9)(dishwasher-n e x)))
;(B (name fridge-n)(=>(o#obj_fridge x u :0.9)(fridge-n e x)))
;(B (name hand-n)(=>(o#obj_hand x u :0.9)(hand-n e x)))
;(B (name plate-n)(=>(o#obj_plate x u :0.9)(plate-n e x)))
;(B (name sink-n)(=>(o#obj_sink x u :0.9)(sink-n e x)))
;(B (name sponge-n)(=>(o#obj_sponge x u :0.9)(sponge-n e x)))
;(B (name juice-n)(=>(o#obj_orangejuice x u :0.9)(juice-n e x)))

(B (name coffeefilter-n)(=>(o#coffeefilters x u :0.3)(^(of-p e1 x x1)(filter-n e2 x)(coffee-n e3 x1))))

(B (name vitaliscereal-n)(=>(o#vitaliscereal x u :0.3)(^(of-p e1 x x1)(cereal-n e2 x)(vitali-n e3 x1))))
(B (name cornycerealbars-n)(=>(o#cornycerealbars x u :0.3)(^(of-p e1 x x1)(bar-n e2 x)(cereal-n e3 x1))))
(B (name cornycereal-n)(=>(o#cornycerealbars x u :0.3)(^(of-p e1 x x1)(cereal-n e2 x)(corny-n e3 x1))))

(B (name orangejuice-n)(=>(o#orangejuice x u :0.3)(^(of-p e1 x x1)(juice-n e2 x)(orange-n e3 x1))))

(B (name multivitaminjuice-n)(=>(o#multivitaminjuice x u :0.4)(^(juice-n e1 x)(multivitamin-a e2 x))))
(B (name multi-vitaminjuice-n)(=>(o#multivitaminjuice x u :0.4)(^(juice-n e1 x)(multi-vitamin-a e2 x))))
(B (name multi-vitaminjuice-n2)(=>(o#multivitaminjuice x u :0.2)(^(juice-n e1 x)(multi-a e2 x)(vitamin-n e3 x1)(of-p e4 x x1))))

(B (name redplate)(=>(o#redplate x u :0.45)(^(red-a e1 x)(plate-n e2 x))))
(B (name greenplate)(=>(o#greenplatex u :0.45)(^(green-a e1 x)(plate-n e2 x))))
(B (name blueplate)(=>(o#blueplate x u :0.45)(^(blue-a e1 x)(plate-n e2 x))))

(B (name redcup)(=>(o#redcup x u :0.45)(^(red-a e1 x)(cup-n e2 x))))
(B (name greencup)(=>(o#greencup x u :0.45)(^(green-a e1 x)(cup-n e2 x))))
(B (name bluecup)(=>(o#bluecup x u :0.45)(^(blue-a e1 x)(cup-n e2 x))))

(B (name left-hand)(=>(o#lefthand x u :0.45)(^(hand-n e1 x)(left-a e2 x))))
(B (name right-hand)(=>(o#righthand x u :0.45)(^(hand-n e1 x)(right-a e2 x))))

(B (name left-arm)(=>(o#leftarm x u :0.45)(^(arm-n e1 x)(left-a e2 x))))
(B (name right-arm)(=>(o#rightarm x u :0.45)(^(arm-n e1 x)(right-a e2 x))))
(B (name left-arm2)(=>(o#leftarm x u :0.2)(^(arm-n e1 x)(left-n e2 y)(of-p e3 x y))))
(B (name right-arm2)(=>(o#rightarm x u :0.2)(^(arm-n e1 x)(right-n e2 y)(of-p e3 x y))))

(B (name both-arms)(=>(o#botharms x u :0.45)(^(arm-n e1 x)(both e2 x))))


(B (name dining_location-n)(=>(o#tabledropofflocation x u :0.9)(^(of-p e1 x x1)(location-n e2 x)(dining-n e3 x1))))

(B (name placesetting-n)(=>(o#placesetting x u :0.2)(^(of-p e1 x x1)(setting-n e2 x)(place-n e3 x1))))
(B (name tablesetting-n)(=>(o#placesetting-n x u :0.2)(^(of-p e1 x x1)(setting-n e2 x)(table-n e3 x1))))

; fix wrong parse
(B (name placesettingfix)(=>(o#placesetting x u :0.9)(^(setting-n e2 x)(place-n e3 x1))))
(B (name tablesettingfix)(=>(o#placesetting x u :0.9)(^(setting-n e2 x)(table-n e3 x1))))
(B (name placesettingfix)(=>(o#placesetting x u :0.9)(^(set-v e1 x u1 u2)(place-n e2 x))))
(B (name tablesettingfix)(=>(o#placesetting x u :0.9)(^(set-v e1 x u1 u2)(table-n e2 x))))

(B (name firstfork)(=>(fork-n e FORK1 :0.9)(^(first-a e1 x)(fork-n e x))))
(B (name secondfork)(=>(fork-n e FORK2 :0.9)(^(second-a e1 x)(fork-n e x))))

(B (name firstknife)(=>(knife-n e KNIFE1 :0.9)(^(first-a e1 x)(knife-n e x))))
(B (name secondknife)(=>(knife-n e KNIFE2 :0.9)(^(second-a e1 x)(knife-n e x))))

; directions

(B (name toleft)(=>(^(direc x :0.9)(o#left x u :0.0)(loc x :0.0))(left-n e2 x)))
(B (name toright)(=>(^(direc x :0.9)(o#right x u :0.0)(loc x :0.0))(right-n e2 x)))
(B (name backwardsn)(=>(^(direc x :0.9)(o#backwards x u :0.0)(loc x :0.0))(backward-n e2 x)))
(B (name forwardsn)(=>(^(direc x :0.9)(o#forwards x u :0.0)(loc x :0.0))(forward-n e2 x)))

(B (name backwardsr)(=>(^(direc x :0.9)(o#backwards x u :0.0)(loc x :0.0))(backwards-r e2 x)))
(B (name forwardsr)(=>(^(direc x :0.9)(o#forwards x u :0.0)(loc x :0.0))(forwards-r e2 x)))

(B (name backwardsr2)(=>(^(direc x :0.9)(o#backwards x u :0.0)(loc x :0.0))(backward-r e2 x)))
(B (name forwardsr2)(=>(^(direc x :0.9)(o#forwards x u :0.0)(loc x :0.0))(forward-r e2 x)))

;;;;;;;;;;;
;LOCATIONS;
;;;;;;;;;;;

(B (name in-p)(=>(^(l#objectIn e1 e0 l u :0.8)(loc l :0.1))(in-p e1 e0 l)))
(B (name at-p)(=>(^(l#objectAt e1 e0 l u :0.8)(loc l :0.1))(at-p e1 e0 l)))
(B (name on-p)(=>(^(l#objectOn e1 e0 l u :0.8)(loc l :0.1))(on-p e1 e0 l)))

(B (name from-p)(=>(loc l :0.9)(from-p e1 e0 l)))
(B (name to-p)(=>(loc l :0.9)(to-p e1 e0 l)))

;;;;;;;;;;;;;;;;;;
; DIRECT COMMANDS;
;;;;;;;;;;;;;;;;;;

; STOP

(B (name stopv)(=>(a#stop x :0.9)(stop-v e0 x y u)))
(B (name stopn)(=>(a#stop R :0.9)(stop-n e0 u)))

; GRASP

(B (name graspv)(=>(grasp e0 agent obj :0.9)(grasp-v e0 agent u obj)))
(B (name graspv)(=>(grasp e0 agent obj :0.9)(take-v e0 agent u obj)))

(B (name graspwith)(=>(a#grasp agent hand loc obj :0.1)(^(grasp e0 agent obj)(with-p e1 e0 hand)(hand-n e2 hand)(!= e0 obj)(!= e0 loc))))
(B (name graspfrom)(=>(^(a#grasp agent hand loc obj :0.1)(loc loc :0.0))(^(grasp e0 agent obj)(from-p e1 e0 loc)(!= e0 obj)(!= e0 loc))))
(B (name grasp)(=>(a#grasp agent hand loc obj :0.9)(grasp e0 agent obj)))

; fix wrong parse

(B (name graspwithfix)(=>(a#grasp agent hand loc obj :0.2)(^(grasp e0 agent obj)(with-p e1 u1 hand)(hand-n e2 hand))))
(B (name graspfromfix)(=>(^(a#grasp agent hand loc obj :0.2)(loc loc :0.0))(^(grasp e0 agent obj)(from-p e1 u1 loc))))

; PUT DOWN

(B (name putdownon)(=>(^(a#putdown agent hand loc obj :0.1)(loc loc :0.0))(^(put-v e0 agent u obj)(down-r e1 e0)(on-p e2 e0 loc)(!= e0 obj)(!= e0 loc))))
(B (name putdownwith)(=>(a#putdown agent hand loc obj :0.1)(^(put-v e0 agent u obj)(down-r e1 e0)(with-p e2 e0 hand)(hand-n e3 hand)(!= e0 obj)(!= e0 loc))))
(B (name putdown)(=>(a#putdown agent hand loc obj :0.3)(^(put-v e0 agent u obj)(down-r e1 e0))))

; fix wrong parse

(B (name putdownonfix)(=>(^(a#putdown agent hand loc obj :0.2)(loc loc :0.0))(^(put-v e0 agent u obj)(down-r e1 e0)(on-p e2 u loc)(!= e0 u))))
(B (name putdownwithfix)(=>(a#putdown agent hand loc obj :0.2)(^(put-v e0 agent u obj)(down-r e1 e0)(with-p e2 u hand)(hand-n e3 hand)(!= e0 u))))

; MOVE

(B (name moverobotto)(=>(^(a#move agent loc1 loc2 :0.45)(loc loc2 :0.0))(^(move-v e0 agent)(to-p e1 e0 loc2))))
(B (name moverobotfrom)(=>(^(a#move agent loc1 loc2 :0.45)(loc loc2 :0.0))(^(move-v e0 agent)(from-p e1 e0 loc1))))

; MOVE TO DIRECTION

(B (name moverobottodir)(=>(a#moveRelative agent u dir :0.1)(^(move-v e0 agent)(to-p e1 e0 dir)(direc dir))))
(B (name moverobotdir)(=>(a#moveRelative R u dir :0.4)(^(move-n e0 dir)(direc dir))))

(B (name moverobotsteptodir)(=>(a#moveRelative agent n dir :0.1)(^(move-v e0 agent u s)(step-n e1 s)(card e2 s n)(to-p e2 s dir)(direc dir))))
(B (name moverobotsteptodir2)(=>(a#moveRelative agent n dir :0.1)(^(move-v e0 agent u s)(step-n e1 s)(card e2 s n)(to-p e2 e1 dir)(direc dir))))
(B (name moverobotsteptodir2)(=>(a#moveRelative R n dir :0.1)(^(move-n e0 m)(step-n e1 s)(card e2 s n)(to-p e1 s dir)(direc dir))))
(B (name moverobotstepdirn)(=>(a#moveRelative R n dir :0.1)(^(move-n e0 m)(step-n e1 s)(card e2 s n)(direc dir))))

(B (name moverobotstepindir)(=>(a#moveRelative agent n dir :0.1)(^(move-v e0 agent u s)(step-n e1 s)(card e2 s n)(in-p e2 s dir)(direc dir))))
(B (name moverobotstepindir2)(=>(a#moveRelative agent n dir :0.1)(^(move-v e0 agent u s)(step-n e1 s)(card e2 s n)(in-p e2 e1 dir)(direc dir))))

(B (name moverobotstepdirv)(=>(a#moveRelative agent n e0 :0.2)(^(move-v e0 agent u s)(step-n e1 s)(card e2 s n)(direc e0))))

; MOVE ARMS TO HOME POSITION

(B (name movearmstohomepos)(=>(a#moveArmsToHomePosition agent arm :0.1)(^(move-v e0 agent u arm)(arm-n e2 arm)(to-p e3 e0 x)(home-n e4 y)(position-n e5 x)(of-p e6 x y))))

(B (name movearmstohomepos)(=>(a#moveArmsToHomePosition R arm :0.1)(^(move-n u e0)(arm-n e2 arm)(to-p e3 e0 x)(home-n e4 y)(position-n e5 x)(of-p e6 x y))))

; RELAX ARMS

(B (name relaxarmn)(=>(a#relaxArms R x :0.4)(^(relax-n e0 r)(arm-n e1 x))))
(B (name relaxarmv)(=>(a#relaxArms agent x :0.4)(^(relax-v e0 agent u x)(arm-n e1 x))))


; recognize plan

(B (name recognizeplan)(=>(RP e0 :0.9)(^(recognize-v e0 agent u plan)(plan-n e1 plan))))

; plan

;(B (name wantv)(=>(p#plan e0 agent int :0.9)(want-v e0 agent int u)))
;(B (name wantthat)(=>(p#plan e0 agent int :0.45)(^(want-v e0 agent p u)(that-p e1 e0 int))))

; If robot needs tp do something than it is not a plan, it is a request
;(B (name willr)(=>(need e0 R int u :0.8)(need-v e0 R int u)))

;(B (name needv)(=>(p#plan e0 agent int :0.9)(need-v e0 agent int u)))

;(B (name intendv)(=>(p#plan e0 agent int :0.9)(intend-v e0 agent int u)))

;(B (name planv)(=>(p#plan e0 agent int :0.9)(plan-v e0 agent int u)))
;(B (name planofbe)(=>(p#plan e0 agent int :0.3)(^(plan-n e0 p)(of-p e1 p agent)(be-v e2 p int u))))

; If robot will do something than it is still a human plan
;(B (name willr)(=>(p#plan e0 H int :0.8)(will e0 R int u)))

;(B (name will)(=>(p#plan e0 agent int :0.9)(will e0 agent int u)))

; help

;(B (name helpv)(=>(h#help e0 helper action requester :0.9)(help-v e0 helper action requester)))
;(B (name helpby)(=>(h#help e0 helper action requester :0.45)(^(help-v e0 helper action requester)(by-p e1 e0 action))))

;(B (name needhelp1)(=>(h#help e0 helper action requester :0.3)(^(need-v e0 requester h u)(help-n e1 h)(for-p e2 e0 action))))
;(B (name needhelp2)(=>(h#help e0 helper action requester :0.3)(^(need-v e0 requester h u)(help-n e1 h)(in-p e2 e0 action))))
(B (name needhelp3)(=>(h#help e0 helper action requester :0.45)(^(need-v e0 requester h u)(help-n e1 h))))

;;;;;;;;;;;;;;;
;;GOAL AXIOMS;;
;;;;;;;;;;;;;;;

; set the table

;(B (name settableforXpeople1)(=>(^(o#plate p e0 :0.0)(g#objectAt p ps e0 :0.0)(o#cup c e0 :0.0)(g#objectAt c ps e0 :0.0)(o#loc_placesetting ps e0 :0.0)(r# e0 n :0.0))(^(set-v e0 agent u t)(table-n e1 t)(for-p e2 e0 per)(o#person per z)(card e4 per n))))

;(B (name settableforXpeople2)(=>(^(o#plate p e0 :0.0)(g#objectAt p ps e0 :0.0)(o#cup c e0 :0.0)(g#objectAt c ps e0 :0.0)(o#loc_placesetting ps e0 :0.0)(r# e0 n :0.0))(^(set-v e0 agent u t)(table-n e1 t)(for-p e2 t per)(o#person per z)(card e4 per n))))

;(B (name settableFORALL)(=>(^(q#forallK LOC_PLACESETTING :0.0)(o#plate p e0 :0.0)(g#objectAt p LOC_PLACESETTING e0 :0.0)(o#cup c e0 :0.0)(g#objectAt c LOC_PLACESETTING e0 :0.0))(^(set-v e0 agent u t)(table-n e1 t))))

(B (name settableforXpeople1)(=>(^(o#cup c e0 :0.0)(g#objectAt c ps e0 :0.0)(o#loc_placesetting ps e0 :0.0)(r# e0 n :0.0))(^(set-v e0 agent u t)(table-n e1 t)(for-p e2 e0 per)(o#person per z)(card e4 per n))))

(B (name settableforXpeople2)(=>(^(o#cup c e0 :0.0)(g#objectAt c ps e0 :0.0)(o#loc_placesetting ps e0 :0.0)(r# e0 n :0.0))(^(set-v e0 agent u t)(table-n e1 t)(for-p e2 t per)(o#person per z)(card e4 per n))))

(B (name settableFORALL)(=>(^(q#forallK LOC_PLACESETTING :0.0)(o#cup c e0 :0.0)(g#objectAt c LOC_PLACESETTING e0 :0.0))(^(set-v e0 agent u t)(table-n e1 t))))

; put things on something: ROBOT
(B (name putonR)(=>(^(g#objectAt obj loc u :0.9)(loc loc :0.0))(^(put-v e0 R u obj)(on-p e1 e0 loc)(!= R H))))
(B (name putonNR)(=>((g#objectAt obj loc e0 :0.1)(r# e0 n :0.0)(r# obj n :0.0)(loc loc :0.0))(^(put-v e1 R u obj)(on-p e2 e0 loc)(card e3 obj n)(!= R H))))

; fix wrong parse
(B (name puton2R)(=>(^(g#objectAt obj loc u :0.9)(loc loc :0.0))(^(put-a e0 obj)(on-p e1 e0 loc))))
(B (name putonN2R)(=>(^(g#objectAt obj loc e0 :0.1)(r# e0 n :0.0)(r# obj n :0.0)(loc loc :0.0))(^(put-a e1 obj)(on-p e2 e0 loc)(card e3 obj n))))

(B (name puton3R)(=>(^(g#objectAt obj loc u :0.9)(loc loc :0.0))(^(put-v e0 R u obj)(on-p e1 obj loc)(!= R H))))
(B (name putonNR)(=>((g#objectAt obj loc e0 :0.1)(r# e0 n :0.0)(r# obj n :0.0)(loc loc :0.0))(^(put-v e1 R u obj)(on-p e2 obj loc)(card e3 obj n)(!= R H))))

; put things on something: HUMAN
(B (name putonH)(=>(^(a#grasp H hand loc1 obj :0.9)(a#putdown H hand loc obj :0.0)(hand-n ee hand :0.0)(loc loc :0.0))(^(put-v e0 H u obj)(on-p e1 e0 loc)(!= R H))))
(B (name putonNH)(=>((a#grasp H hand loc1 obj :0.0)(a#putdown H hand loc obj :0.ß)(hand-n ee hand :0.0)(r# e0 n :0.0)(r# obj n :0.0)(loc loc :0.0))(^(put-v e1 H u obj)(on-p e2 e0 loc)(card e3 obj n)(!= R H))))

; fix wrong parse
(B (name puton3H)(=>(^(a#grasp H hand loc1 obj :0.9)(a#putdown H hand loc obj :0.0)(hand-n ee hand :0.0)(loc loc :0.0))(^(put-v e0 H u obj)(on-p e1 obj loc)(!= R H))))
(B (name putonNH)(=>((a#grasp H hand loc1 obj :0.9)(a#putdown H hand loc obj :0.0)(hand-n ee hand :0.0)(r# e0 n :0.0)(r# obj n :0.0)(loc loc :0.0))(^(put-v e1 H u obj)(on-p e2 obj loc)(card e3 obj n)(!= R H))))

; bring things
(B (name bringv)(=>(a#give e1 agent obj req :0.9)(bring-v e1 agent req obj)))
(B (name givev)(=>(a#give e1 agent obj req :0.9)(give-v e1 agent req obj)))

(B (name bringfrom)(=>(^(a#give e1 agent obj req :0.2)(l#objectAt e1 obj loc e0 :0.2)(loc loc :0.0))(^(bring-v e0 agent req obj)(from-p e1 e0 loc))))
(B (name givefrom)(=>(^(a#give e1 agent obj req :0.2)(l#objectAt e1 obj loc e0 :0.2)(loc loc :0.0))(^(give-v e0 agent req obj)(from-p e1 e0 loc))))

; fixing the parse
(B (name bringfrom)(=>(^(a#give e1 agent obj req :0.2)(l#objectAt e1 obj loc e0 :0.2)(loc loc :0.0))(^(bring-v e0 agent req obj)(from-p e1 obj loc))))
(B (name givefrom)(=>(^(a#give e1 agent obj req :0.2)(l#objectAt e1 obj loc e0 :0.2)(loc loc :0.0))(^(give-v e0 agent req obj)(from-p e1 obj loc))))

(B (name giveN)(=>(^(g#inHand obj hand e0 :0.3)(hand-n e1 hand :0.0)(g#handOf hand req u :0.3)(r# e0 n :0.0)(r# obj n :0.0))(^(a#give e0 R obj req)(card e1 obj n)(!= R H))))
(B (name give)(=>(^(g#inHand obj hand e0 :0.3)(hand-n e1 hand :0.3)(g#handOf hand req u :0.3))(^(a#give e0 R obj req)(!= R H))))

; move things to locations

(B (name movev)(=>(move e1 agent obj)(move-v e1 agent u obj)))
(B (name carryv)(=>(move e1 agent obj)(carry-v e1 agent u obj)))

; fix wrong parse
(B (name carryn)(=>(move c agent c)(carry-n e1 c)))


; move chair to table
(B (name moveto)(=>(^(g#objectAt c cdl u1 :0.1)(o#loc_chairdropofflocation cdl u :0.1))(^(move e1 agent c)(chair-n e2 c)(to-p e3 e1 loc)(table-n e4 t))))
(B (name movetoN)(=>(^(g#objectAt c cdl e1 :0.0)(o#loc_chairdropofflocation cdl e1 :0.0)(r# e1 n :0.0))(^(move e1 agent c)(chair-n e2 c)(to-p e3 e1 loc)(table-n e4 t)(card e5 obj n))))

(B (name moveto)(=>(g#objectAt obj loc u1 :0.45)(^(move e1 agent obj)(to-p e2 e1 loc))))
(B (name movetoN)(=>(^(g#objectAt obj loc e0 :0.3)(r# e0 n :0.0)(r# obj n :0.0)(loc loc :0.0))(^(move e1 agent obj)(to-p e2 e1 loc)(card e3 obj n))))

; fix wrong argument binding for move obj to table
(B (name movetotable)(=>(^(g#objectAt obj t u1 :0.45)(loc t :0.0))(^(move-v e1 agent u obj)(to-p e2 e1 t)(table-n e3 t)(!= obj t))))
(B (name moveNtotable)(=>(^(g#objectAt obj t e0 :0.1)(r# e0 n :0.0)(r# obj n :0.0)(loc t :0.0))(^(move e1 agent obj)(to-p e2 e1 t)(card e3 obj n)(table-n e4 t)(!= obj t))))

(B (name movetable)(=>(^(g#objectAt t tdl u0 :0.4)(o#loc_tabledropofflocation tdl :0.0))(^(move e1 agent t)(table-n e2 t))))

(B (name movetableto)(=>(^(g#objectAt t loc u1 :0.1)(loc loc :0.0))(^(move e1 agent t)(table-n e2 t)(to-p e2 e1 loc)(!= loc t))))

; arrange chairs
(B (name arrangechair)(=>(^(g#objectAt c ts u :0.2)(o#loc_chairdropofflocation ts u :0.0))(^(arrange-v e0 agent u c)(chair-n e1 c))))
(B (name arrangeNchairs)(=>(^(g#objectAt c ts e0 :0.1)(o#loc_chairdropofflocation ts e0 :0.0)(r# e0 n :0.0)(r# c n :0.0))(^(arrange-v e0 agent u c)(chair-n e1 c)(card e2 c n))))

; fix wrong parse
(B (name arrangechairfix1)(=>(^(g#objectAt c ts u :0.2)(o#loc_chairdropofflocation ts u :0.0))(^(arrange-n e0 c)(chair-n e1 c))))
(B (name arrangechairfix2)(=>(^(g#objectAt c ts u :0.2)(o#loc_chairdropofflocation ts u :0.0))(^(arrange-n e0 a)(of-p e2 c a)(chair-n e1 c))))
(B (name arrangeNchairsfix3)(=>(^(g#objectAt c ts e0 :0.1)(o#loc_chairdropofflocation ts e0 :0.0)(r# e0 n :0.0)(r# c n :0.0))(^(arrange-n e0 c)(chair-n e1 c)(card e2 c n))))

(B (name arrangechairfix4)(=>(^(g#objectAt c ts u :0.4)(o#loc_chairdropofflocation ts u :0.0))(^(arrange-v e0 agent u1 u2)(chair-n e1 c))))
(B (name arrangeNchairsfix)(=>(^(g#objectAt c ts e0 :0.1)(o#loc_chairdropofflocation ts e0 :0.0)(r# e0 n :0.0)(r# c n :0.0))(^(arrange-v e0 agent u1 u2)(chair-n e1 c)(card e2 c n))))

;(B (name arrangechairs)(=>(^(q#forallK LOC_CHAIRDROPOFFLOCATION :0.0)(g#objectAt c LOC_CHAIRDROPOFFLOCATION e0 :0.9))(^(arrange-v e0 agent u c)(chair-n e1 c))))

; wipe the table

(B (name wipetable)(=>(g#clean t u :0.9)(^(wipe-v e0 agent u t)(table-n e1 t))))

; close and open

(B (name closev)(=>(g#n#open obj u :0.9)(close-v e0 agent u obj)))

(B (name closeda)(=>(s#n#open e0 obj u :0.9)(closed-a e0 obj)))

(B (name openv)(=>(g#open obj u :0.9)(open-v e0 agent u obj)))

(B (name opena)(=>(s#open e0 obj u :0.9)(open-a e0 obj)))


; clean and dirty

(B (name cleanv)(=>(g#clean t u :0.9)(clean-v e0 agent u t)))

(B (name cleana)(=>(s#clean e0 x u :0.9)(clean-a e0 x)))
(B (name dirtya)(=>(s#n#clean e0 x u :0.9)(dirty-a e0 x)))
(B (name dirtyn)(=>(s#n#clean e0 y u :0.9)(^(dirty-n e0 y)(equal e1 x y))))